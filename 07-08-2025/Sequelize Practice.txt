// config/database.js
import Sequelize from 'sequelize'


const sequelize = new Sequelize('database_name', 'user_name', 'user_password', {
	host:'localhost',
	dialect:'mysql'
})


try{
	await sequelize.authenticate()
	console.log("DB connected successfully")
}catch(err){
	console.error(err)
}

export default sequelize

// model/userModel.js

import sequelize from './config/database.js'

const User = sequelize.define("UserTable",
	{
		id:{
			type: DataTypes.INTEGER,
			autoIncrement:true,
			primaryKey: true,
			allowNull: false,
			},
		name:{
			type: DataTypes.STRING,
			allowNull:false,
			},
		email:{
			type: DataTypes.STRING,
			validate:{
				isEmail:true,
				},
			allowNull:false,
			},
		role:{
			type: DataTypes.ENUM(user, admin, owner),
			defaultValue:'user',
			
			}

	},
	tableName:"UserTable", // explicitly providing tablename
	paranoid:true,
)

// suppose their is another table Product 
// one to one relation 
User.hasOne(Product)
Product.belongsTo(User)

// one to many relation
User.hasMany(Product)
Product.belongsTo(User,
	foreignKey: 'userid'	//explicitly giving foreign key
)


// many to many relation
User.belongsToMany(Product)
Product.belongsToMany(User)

try{
	await User.sync()

}catch(err){
	console.error(err)
	}


export default User


// root/app.js

import express from 'express'
import sequelize from './config/database.js'

const app = express()
const PORT=3000

app.use('/', router_name)

try{
	await sequelize.sync()
}catch(err){
	console.error(err)
}

app.listen(PORT,()=>{
console.log(`App is listening on ${PORT}`)
})


export default App